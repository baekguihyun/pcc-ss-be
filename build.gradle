plugins {
	id 'java'
	id 'org.springframework.boot' version '3.3.2'
	id 'io.spring.dependency-management' version '1.1.6'
	id 'maven-publish'
}

group = 'org.promisepeople.ss'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '17'
targetCompatibility = '17'

publishing {
	publications {
		mavenJava(MavenPublication) {
			from components.java
		}
	}
	repositories {
		maven {
			def mavenRepoLocal = project.findProperty("maven.repo.local")
			url = uri(mavenRepoLocal ?: "${System.env.HOME}/.m2/repository")
		}
	}
}

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(17)
	}
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenLocal()
	mavenCentral()
}

ext {
	jjwtVersion = '0.12.6'
	jacksonVersion = '2.17.2'
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'org.springframework.boot:spring-boot-starter-security'

	// MyBatis + Spring Boot 연동
	implementation 'org.mybatis.spring.boot:mybatis-spring-boot-starter:3.0.3'

	implementation 'org.mariadb.jdbc:mariadb-java-client'

	implementation 'org.modelmapper:modelmapper:3.1.1'
	implementation 'net.coobird:thumbnailator:0.4.20'
	implementation 'com.google.code.gson:gson:2.11.0'

	implementation 'org.apache.commons:commons-lang3:3.17.0'
	implementation 'commons-collections:commons-collections:3.2.2'

	implementation "com.fasterxml.jackson.dataformat:jackson-dataformat-xml:${jacksonVersion}"

	implementation 'org.springframework.boot:spring-boot-starter-log4j2'

	// JWT
	implementation "io.jsonwebtoken:jjwt-api:${jjwtVersion}"
	runtimeOnly "io.jsonwebtoken:jjwt-impl:${jjwtVersion}"
	runtimeOnly "io.jsonwebtoken:jjwt-jackson:${jjwtVersion}"

	// lombok
	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'

	developmentOnly 'org.springframework.boot:spring-boot-devtools'

	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
	testCompileOnly 'org.projectlombok:lombok'
	testAnnotationProcessor 'org.projectlombok:lombok:'

	configurations {
		all {
			exclude group: 'org.springframework.boot', module: 'spring-boot-starter-logging'
			exclude group: 'org.apache.logging.log4j', module: 'log4j-to-slf4j'
		}
	}
}

tasks.named('test') {
	useJUnitPlatform()
}

ext.profile = project.hasProperty('profile') ?  project.property('profile') : 'local'

println "Current profile: ${profile}"

sourceSets {
	main {
		resources {
			srcDirs "src/main/resources", "src/main/resources-env/${profile}"
		}
	}
}

tasks {
	processResources {
		duplicatesStrategy = org.gradle.api.file.DuplicatesStrategy.INCLUDE
	}
}

bootJar {
	archiveFileName = "${project.name}.jar"  // project.name과 project.version을 사용
}

task printMavenRepoLocal {
	doLast {
		println "Maven Local Repository: " + project.findProperty("maven.repo.local")
	}
}

// 의존성을 로컬 Maven에 설치하는 태스크
task installDependenciesToMavenLocal {
	dependsOn configurations.runtimeClasspath
	doLast {
		configurations.runtimeClasspath.resolvedConfiguration.resolvedArtifacts.each { artifact ->
			def file = artifact.file
			def groupId = artifact.moduleVersion.id.group
			def artifactId = artifact.moduleVersion.id.name
			def version = artifact.moduleVersion.id.version
			println "Installing ${groupId}:${artifactId}:${version} to Maven local repository"
			exec {
				commandLine 'mvn.cmd', 'install:install-file',
						"-Dfile=${file}",
						"-DgroupId=${groupId}",
						"-DartifactId=${artifactId}",
						"-Dversion=${version}",
						"-Dpackaging=jar",
						"-DgeneratePom=true"
			}
		}
	}
}